use rand::prelude::*;

use crate::convolution::*;
use crate::growth::*;
use crate::file::*;
use crate::imgep::*;
use crate::sdl::*;

pub struct Field {
    pub t: f64,
    pub l: usize,
    pub h: usize,
    pub k_size: usize,
    pub nb_channels: usize,
    pub m: Vec<Vec<Vec<f64>>>,
}

pub enum Kernel<'a> {
    Ring1(usize),
    Ring2(usize, usize),
    Bumpy(& 'a Param),
    Radical(& 'a Param),
}

#[derive(Clone)]
pub enum Motif {
    Agent(Agent),
    Rand(usize, usize),
}

#[derive(Clone)]
pub enum Agent {
    Orbium,
    Hydrogeminium,
    Fish,
    Aquarium,
}

impl Field {
    // A function to create an empty field
    pub fn new_field(h: usize, l: usize, nb_channels: usize) -> Field {
        Field {
            t: 0.0,
            l,
            h,
            k_size: 0,
            nb_channels: nb_channels,
            m: vec![vec![vec![0.; l]; h]; nb_channels],
        }
    }

    pub fn to_tore(mut self: Field, kernel: Vec<Vec<f64>>){
        for i in 0..self.nb_channels{
            self.m[i] = tore_format(&self.m[i], &kernel);
        }
        self.k_size = kernel.len();
    }

    pub fn get_xy(self: &Field, x: usize, y: usize, chanel: usize) -> f64{
        self.m[chanel][x][y]
    }

    pub fn fill(self: &mut Field,chan: usize, val: f64){
        for i in 0..self.h{
            for j in 0..self.l{
                self.m[chan][i][j] = val;
            }
        }
    }

    pub fn fill_deg(self: &mut Field, chan: usize, start: f64, end: f64){
        for i in 0..self.h{
            for j in 0..self.l{
                let fi = i as f64;
                let fj = j as f64;
                let fl = self.l as f64;
                let fh = self.h as f64;
                self.m[chan][i][j] = start + (fi+fj)*(end)/(fh+fl);
            }
        }
    }

    pub fn fill_rng(self:&mut Field, chan: usize){
        let mut rng = rand::thread_rng();
        for i in 0..self.h{
            for j in 0..self.l{
                self.m[chan][i][j] = rng.gen::<f64>();
            }
        }
    }

    pub fn add(self:&mut Field, set: &Settings, x: usize, y: usize){
        let mut m: Vec<Vec<Vec<f64>>> = vec![];
        match &set.motif{
            Motif::Agent(agent) => {
                match agent {
                    Agent::Orbium => {
                        m.push(read_field("storage/creature/orbium.txt"));
                    },
                    Agent::Hydrogeminium => {
                        m.push(hydrogeminium());
                    },
                    Agent::Fish => {
                        m.push(fish());
                    }
                    Agent::Aquarium => {
                        m = aquarium();
                    },
                }

            },
            Motif::Rand(h, l) => {
                println!("huh");
                m.push(random_square(*h, *l, set.mode.clone()));
            }
        }
        
        println!("test1");
        
        for k in 0..m.len() {
            println!("y + m[k][0].len() : {}, self.l: {}", y + m[k][0].len(), self.l);
            println!("x + m[k].len() : {}, self.l: {}", x + m[k].len(), self.h);
            if (y + m[k][0].len() < self.l) && (x + m[k].len() < self.h){
                println!("test2: {}", k);
                for i in 0..m[k].len(){
                    for j in 0..m[k][0].len(){
                        self.m[k][x+i][y+j] = m[k][i][j];
                    }
                }
            }
        }
    }

}



fn orbium() -> Vec<Vec<f64>>{
     vec![[0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.14,0.1,0.0,0.0,0.03,0.03,0.0,0.0,0.3,0.0,0.0,0.0,0.0].to_vec(), 
      [0.0,0.0,0.0,0.0,0.0,0.08,0.24,0.3,0.3,0.18,0.14,0.15,0.16,0.15,0.09,0.2,0.0,0.0,0.0,0.0].to_vec(), 
      [0.0,0.0,0.0,0.0,0.0,0.15,0.34,0.44,0.46,0.38,0.18,0.14,0.11,0.13,0.19,0.18,0.45,0.0,0.0,0.0].to_vec(), 
      [0.0,0.0,0.0,0.0,0.06,0.13,0.39,0.5,0.5,0.37,0.06,0.0,0.0,0.0,0.02,0.16,0.68,0.0,0.0,0.0].to_vec(), 
      [0.0,0.0,0.0,0.11,0.17,0.17,0.33,0.4,0.38,0.28,0.14,0.0,0.0,0.0,0.0,0.0,0.18,0.42,0.0,0.0].to_vec(), 
      [0.0,0.0,0.09,0.18,0.13,0.06,0.08,0.26,0.32,0.32,0.27,0.0,0.0,0.0,0.0,0.0,0.0,0.82,0.0,0.0].to_vec(), 
      [0.27,0.0,0.16,0.12,0.0,0.0,0.0,0.25,0.38,0.44,0.45,0.34,0.0,0.0,0.0,0.0,0.0,0.22,0.17,0.0].to_vec(), 
      [0.0,0.07,0.2,0.02,0.0,0.0,0.0,0.31,0.48,0.57,0.6,0.57,0.0,0.0,0.0,0.0,0.0,0.0,0.49,0.0].to_vec(), 
      [0.0,0.59,0.19,0.0,0.0,0.0,0.0,0.2,0.57,0.69,0.76,0.76,0.49,0.0,0.0,0.0,0.0,0.0,0.36,0.0].to_vec(), 
      [0.0,0.58,0.19,0.0,0.0,0.0,0.0,0.0,0.67,0.83,0.9,0.92,0.87,0.12,0.0,0.0,0.0,0.0,0.22,0.07].to_vec(), 
      [0.0,0.0,0.46,0.0,0.0,0.0,0.0,0.0,0.7,0.93,1.0,1.0,1.0,0.61,0.0,0.0,0.0,0.0,0.18,0.11].to_vec(), 
      [0.0,0.0,0.82,0.0,0.0,0.0,0.0,0.0,0.47,1.0,1.0,0.98,1.0,0.96,0.27,0.0,0.0,0.0,0.19,0.1].to_vec(), 
      [0.0,0.0,0.46,0.0,0.0,0.0,0.0,0.0,0.25,1.0,1.0,0.84,0.92,0.97,0.54,0.14,0.04,0.1,0.21,0.05].to_vec(), 
      [0.0,0.0,0.0,0.4,0.0,0.0,0.0,0.0,0.09,0.8,1.0,0.82,0.8,0.85,0.63,0.31,0.18,0.19,0.2,0.01].to_vec(), 
      [0.0,0.0,0.0,0.36,0.1,0.0,0.0,0.0,0.05,0.54,0.86,0.79,0.74,0.72,0.6,0.39,0.28,0.24,0.13,0.0].to_vec(), 
      [0.0,0.0,0.0,0.01,0.3,0.07,0.0,0.0,0.08,0.36,0.64,0.7,0.64,0.6,0.51,0.39,0.29,0.19,0.04,0.0].to_vec(), 
      [0.0,0.0,0.0,0.0,0.1,0.24,0.14,0.1,0.15,0.29,0.45,0.53,0.52,0.46,0.4,0.31,0.21,0.08,0.0,0.0].to_vec(), 
      [0.0,0.0,0.0,0.0,0.0,0.08,0.21,0.21,0.22,0.29,0.36,0.39,0.37,0.33,0.26,0.18,0.09,0.0,0.0,0.0].to_vec(), 
      [0.0,0.0,0.0,0.0,0.0,0.0,0.03,0.13,0.19,0.22,0.24,0.24,0.23,0.18,0.13,0.05,0.0,0.0,0.0,0.0].to_vec(), 
      [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02,0.06,0.08,0.09,0.07,0.05,0.01,0.0,0.0,0.0,0.0,0.0].to_vec()]
}

fn hydrogeminium() -> Vec<Vec<f64>>{
    vec![[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.02,0.03,0.04,0.04,0.04,0.03,0.02,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04,0.1,0.16,0.2,0.23,0.25,0.24,0.21,0.18,0.14,0.1,0.07,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.09,0.2,0.33,0.44,0.52,0.56,0.58,0.55,0.51,0.44,0.37,0.3,0.23,0.16,0.08,0.01,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.13,0.29,0.45,0.6,0.75,0.85,0.9,0.91,0.88,0.82,0.74,0.64,0.55,0.46,0.36,0.25,0.12,0.03,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.14,0.38,0.6,0.78,0.93,1.0,1.0,1.0,1.0,1.0,1.0,0.99,0.89,0.78,0.67,0.56,0.44,0.3,0.15,0.04,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.08,0.39,0.74,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.98,0.85,0.74,0.62,0.47,0.3,0.14,0.03,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.32,0.76,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.88,0.75,0.61,0.45,0.27,0.11,0.01,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.35,0.83,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.88,0.73,0.57,0.38,0.19,0.05,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.99,1.0,1.0,1.0,1.0,0.99,1.0,1.0,1.0,1.0,1.0,1.0,0.85,0.67,0.47,0.27,0.11,0.01].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.55,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.93,0.83,0.79,0.84,0.88,0.89,0.9,0.93,0.98,1.0,1.0,1.0,1.0,0.98,0.79,0.57,0.34,0.15,0.03].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.47,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9,0.72,0.54,0.44,0.48,0.6,0.7,0.76,0.82,0.91,0.99,1.0,1.0,1.0,1.0,0.91,0.67,0.41,0.19,0.05].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.27,0.99,1.0,1.0,1.0,1.0,0.9,0.71,0.65,0.55,0.38,0.2,0.14,0.21,0.36,0.52,0.64,0.73,0.84,0.95,1.0,1.0,1.0,1.0,1.0,0.78,0.49,0.24,0.07].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.14,0.63,0.96,1.0,1.0,1.0,0.84,0.17,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.13,0.35,0.51,0.64,0.77,0.91,0.99,1.0,1.0,1.0,1.0,0.88,0.58,0.29,0.09].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.07,0.38,0.72,0.95,1.0,1.0,1.0,0.22,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.11,0.33,0.5,0.67,0.86,0.99,1.0,1.0,1.0,1.0,0.95,0.64,0.33,0.1].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.32,0.49,0.71,0.93,1.0,1.0,1.0,0.56,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.31,0.52,0.79,0.98,1.0,1.0,1.0,1.0,0.98,0.67,0.35,0.11].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.6,0.83,0.98,1.0,1.0,0.68,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.15,0.38,0.71,0.97,1.0,1.0,1.0,1.0,0.97,0.67,0.35,0.11].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.51,0.96,1.0,1.0,0.18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.09,0.34,0.68,0.95,1.0,1.0,1.0,1.0,0.91,0.61,0.32,0.1].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.13,0.56,0.99,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.17,0.45,0.76,0.96,1.0,1.0,1.0,1.0,0.82,0.52,0.26,0.07].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.33,0.7,0.94,1.0,1.0,0.44,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.33,0.68,0.91,0.99,1.0,1.0,1.0,1.0,0.71,0.42,0.19,0.03].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.53,0.89,1.0,1.0,1.0,0.8,0.43,0.04,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.47,0.86,1.0,1.0,1.0,1.0,1.0,0.95,0.58,0.32,0.12,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.77,0.99,1.0,0.97,0.58,0.41,0.33,0.18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.54,0.95,1.0,1.0,1.0,1.0,1.0,0.8,0.44,0.21,0.06,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39,0.83,1.0,1.0,0.55,0.11,0.05,0.15,0.22,0.06,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.58,0.99,1.0,1.0,1.0,1.0,1.0,0.59,0.29,0.11,0.01,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04,0.55,0.81,0.86,0.97,1.0,1.0,0.5,0.0,0.0,0.01,0.09,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.26,0.78,1.0,1.0,1.0,1.0,1.0,0.66,0.35,0.13,0.03,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.33,1.0,1.0,1.0,1.0,1.0,1.0,0.93,0.11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.23,0.73,0.95,1.0,1.0,1.0,1.0,1.0,0.62,0.35,0.12,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.51,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.72,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.56,0.25,0.09,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.12,0.38,1.0,1.0,1.0,0.66,0.08,0.55,1.0,1.0,1.0,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.35,1.0,1.0,1.0,1.0,1.0,1.0,0.67,0.12,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6,1.0,1.0,1.0,1.0,1.0,1.0,0.49,0.0,0.0,0.87,1.0,0.88,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.7,0.07,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04,0.21,0.48,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.04,0.42,0.26,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.12,0.21,0.34,0.58,1.0,1.0,1.0,0.99,0.97,0.99,0.46,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5,1.0,1.0,1.0,1.0,0.96,0.0,0.31,1.0,1.0,1.0,0.53,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2,0.21,0.0,0.0,0.0,0.27,1.0,1.0,1.0,1.0,1.0,1.0,0.87,0.52,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.84,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.83,1.0,1.0,0.52,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.26,0.82,0.59,0.02,0.0,0.0,0.46,1.0,1.0,1.0,1.0,1.0,0.9,0.55,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39,0.99,1.0,1.0,1.0,1.0,0.78,0.04,0.0,0.0,0.0,0.93,0.92,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.69,1.0,1.0,0.36,0.0,0.0,1.0,1.0,0.65,0.66,0.97,0.87,0.54,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.55,0.75,0.59,0.74,1.0,1.0,0.0,0.0,0.75,0.71,0.18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.29,0.0,0.0,0.45,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.47,0.39,0.71,0.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.69,0.81,0.8,0.92,1.0,0.13,0.0,0.0,0.13,0.94,0.58,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.34,0.0,0.04,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.24,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.63,0.85,0.9,0.98,1.0,0.09,0.0,0.0,0.02,1.0,0.64,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.59,1.0,1.0,0.84,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.64,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.64,0.65,0.67,1.0,1.0,0.21,0.01,0.0,0.04,0.02,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.69,1.0,1.0,1.0,0.29,0.37,1.0,1.0,0.6,0.63,1.0,0.84,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.44,0.73,0.73,0.85,1.0,0.97,0.23,0.05,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.06,0.0,0.0,0.0,0.97,1.0,1.0,1.0,1.0,1.0,1.0,0.33,0.24,0.67,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.12,0.55,0.9,0.9,1.0,1.0,1.0,0.43,0.04,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.31,0.54,0.0,0.0,0.0,0.88,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.29,0.71,1.0,1.0,1.0,1.0,0.79,0.28,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4,0.77,0.54,0.0,0.0,0.87,1.0,1.0,1.0,1.0,1.0,0.31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.16,0.27,0.41,0.72,0.99,1.0,1.0,0.82,0.42,0.09,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.55,0.58,0.58,0.77,0.99,1.0,1.0,1.0,1.0,0.63,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.31,0.48,0.45,0.46,0.63,0.88,1.0,0.83,0.59,0.28,0.06,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.32,0.7,0.95,1.0,1.0,1.0,1.0,0.7,0.58,0.12,0.04,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.23,0.54,0.53,0.48,0.57,0.59,0.65,0.63,0.55,0.35,0.13,0.03,0.02,0.09,0.74,1.0,0.09,0.0,0.0,0.0,0.32,0.86,1.0,1.0,1.0,1.0,0.57,0.44,0.31,0.16,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.31,0.45,0.31,0.18,0.28,0.39,0.47,0.54,0.5,0.35,0.2,0.16,0.28,0.75,1.0,0.42,0.01,0.0,0.0,0.6,1.0,1.0,1.0,1.0,0.51,0.29,0.09,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.14,0.3,0.4,0.54,0.71,0.74,0.65,0.49,0.35,0.27,0.47,0.6,0.6,0.72,0.98,1.0,1.0,1.0,1.0,0.65,0.33,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.06,0.33,0.53,0.69,0.94,0.99,1.0,0.84,0.41,0.16,0.15,0.96,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.73,0.13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.42,0.86,0.98,0.98,0.99,1.0,0.94,0.63,0.32,0.62,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.65,0.23,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.07,0.62,0.95,1.0,1.0,0.99,0.98,0.99,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.98,0.14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.03,0.46,0.89,1.0,1.0,0.97,0.83,0.75,0.81,0.94,1.0,1.0,1.0,1.0,0.99,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.14,0.57,0.88,0.93,0.81,0.58,0.45,0.48,0.64,0.86,0.97,0.99,0.99,0.42,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.23,0.45,0.47,0.39,0.29,0.19,0.2,0.46,0.28,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.08,0.22,0.24,0.15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec(),
     [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.07,0.22,0.14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0].to_vec()]
}

fn fish() -> Vec<Vec<f64>> {
    vec![vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.06,0.1,0.04,0.02,0.01,0.0,0.0,0.0,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.15,0.37,0.5,0.44,0.19,0.23,0.3,0.23,0.15,0.01,0.0,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.0,0.0,0.32,0.78,0.26,0.0,0.11,0.11,0.1,0.08,0.18,0.16,0.17,0.24,0.09,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.45,0.16,0.0,0.0,0.0,0.0,0.0,0.15,0.15,0.16,0.15,0.1,0.09,0.21,0.24,0.12,0.0,0.0], 
         vec![0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.17,0.39,0.43,0.34,0.25,0.15,0.16,0.15,0.25,0.03,0.0], 
         vec![0.0,0.15,0.06,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.24,0.72,0.92,0.85,0.61,0.47,0.39,0.27,0.12,0.18,0.17,0.0], 
         vec![0.0,0.08,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.73,0.6,0.56,0.31,0.12,0.15,0.24,0.01], 
         vec![0.0,0.16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.76,1.0,1.0,1.0,1.0,0.76,0.72,0.65,0.39,0.1,0.17,0.24,0.05], 
         vec![0.0,0.05,0.0,0.0,0.0,0.0,0.0,0.0,0.21,0.83,1.0,1.0,1.0,1.0,0.86,0.85,0.76,0.36,0.17,0.13,0.21,0.07], 
         vec![0.0,0.05,0.0,0.0,0.02,0.0,0.0,0.0,0.4,0.91,1.0,1.0,1.0,1.0,1.0,0.95,0.79,0.36,0.21,0.09,0.18,0.04], 
         vec![0.06,0.08,0.0,0.18,0.21,0.1,0.03,0.38,0.92,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.64,0.31,0.12,0.07,0.25,0.0], 
         vec![0.05,0.12,0.27,0.4,0.34,0.42,0.93,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.97,0.33,0.16,0.05,0.1,0.26,0.0], 
         vec![0.0,0.25,0.21,0.39,0.99,1.0,1.0,1.0,1.0,1.0,1.0,0.86,0.89,0.94,0.83,0.13,0.0,0.0,0.04,0.21,0.18,0.0], 
         vec![0.0,0.06,0.29,0.63,0.84,0.97,1.0,1.0,1.0,0.96,0.46,0.33,0.36,0.0,0.0,0.0,0.0,0.0,0.03,0.35,0.0,0.0], 
         vec![0.0,0.0,0.13,0.22,0.59,0.85,0.99,1.0,0.98,0.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.34,0.14,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.33,0.7,0.95,0.8,0.33,0.11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.11,0.26,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.16,0.56,0.52,0.51,0.4,0.18,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.42,0.0,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.01,0.0,0.33,0.47,0.33,0.05,0.0,0.0,0.0,0.0,0.0,0.0,0.35,0.0,0.0,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.0,0.26,0.32,0.13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.34,0.0,0.0,0.0,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.0,0.22,0.25,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.46,0.0,0.0,0.0,0.0,0.0,0.0,0.0], 
         vec![0.0,0.0,0.0,0.0,0.0,0.0,0.09,0.2,0.22,0.23,0.23,0.22,0.3,0.3,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]]
}


fn aquarium() -> Vec<Vec<Vec<f64>>> {
   vec![vec![vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.49,1.0,0.0,0.03,0.49,0.49,0.28,0.16,0.03,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6,0.47,0.31,0.58,0.51,0.35,0.28,0.22,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.15,0.32,0.17,0.61,0.97,0.29,0.67,0.59,0.88,1.0,0.92,0.8,0.61,0.42,0.19,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.25,0.64,0.26,0.92,0.04,0.24,0.97,1.0,1.0,1.0,1.0,0.97,0.71,0.33,0.12,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.38,0.84,0.99,0.78,0.67,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.95,0.62,0.37,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.04,0.11,0.0,0.69,0.75,0.75,0.91,1.0,1.0,0.89,1.0,1.0,1.0,1.0,1.0,1.0,0.81,0.42,0.07,0.0],
     vec![0.0,0.0,0.0,0.0,0.44,0.63,0.04,0.0,0.0,0.0,0.11,0.14,0.0,0.05,0.64,1.0,1.0,1.0,1.0,1.0,0.92,0.56,0.23,0.0],
     vec![0.0,0.0,0.0,0.0,0.11,0.36,0.35,0.2,0.0,0.0,0.0,0.0,0.0,0.0,0.63,1.0,1.0,1.0,1.0,1.0,0.96,0.49,0.26,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.4,0.37,0.18,0.0,0.0,0.0,0.0,0.0,0.04,0.41,0.52,0.67,0.82,1.0,1.0,0.91,0.4,0.23,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04,0.0,0.05,0.45,0.89,1.0,0.66,0.35,0.09,0.0],
     vec![0.0,0.0,0.22,0.0,0.0,0.0,0.05,0.36,0.6,0.13,0.02,0.04,0.24,0.34,0.1,0.0,0.04,0.62,1.0,1.0,0.44,0.25,0.0,0.0],
     vec![0.0,0.0,0.0,0.43,0.53,0.58,0.78,0.9,0.96,1.0,1.0,1.0,1.0,0.71,0.46,0.51,0.81,1.0,1.0,0.93,0.19,0.06,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.23,0.26,0.37,0.51,0.71,0.89,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.42,0.06,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.03,0.0,0.0,0.11,0.35,0.62,0.81,0.93,1.0,1.0,1.0,1.0,1.0,0.64,0.15,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.06,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.05,0.09,0.05,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],
    vec![vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02,0.28,0.42,0.44,0.34,0.18,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.34,1.0,1.0,1.0,1.0,1.0,0.91,0.52,0.14,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.17,0.75,1.0,1.0,1.0,1.0,1.0,1.0,0.93,0.35,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.22,0.92,1.0,1.0,1.0,1.0,1.0,1.0,0.59,0.09],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.75,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.71,0.16],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.67,0.83,0.85,1.0,1.0,1.0,1.0,1.0,1.0,0.68,0.17],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.21,0.04,0.12,0.58,0.95,1.0,1.0,1.0,1.0,1.0,0.57,0.13],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.07,0.0,0.0,0.0,0.2,0.64,0.96,1.0,1.0,1.0,0.9,0.24,0.01],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.13,0.29,0.0,0.0,0.0,0.25,0.9,1.0,1.0,1.0,1.0,0.45,0.05,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.13,0.31,0.07,0.0,0.46,0.96,1.0,1.0,1.0,1.0,0.51,0.12,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.26,0.82,1.0,0.95,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,0.05,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.28,0.74,1.0,0.95,0.87,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.07,0.69,1.0,1.0,1.0,1.0,1.0,0.96,0.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4,0.72,0.9,0.83,0.7,0.56,0.43,0.14,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],
    vec![vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04,0.25,0.37,0.44,0.37,0.24,0.11,0.04,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.19,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.75,0.4,0.15,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.14,0.48,0.83,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.4,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.62,0.78,0.94,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.64,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02,0.65,0.98,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.78,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.15,0.48,0.93,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.79,0.05,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.33,0.56,0.8,1.0,1.0,1.0,0.37,0.6,0.94,1.0,1.0,1.0,1.0,0.68,0.05,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.35,0.51,0.76,0.89,1.0,1.0,0.72,0.15,0.0,0.29,0.57,0.69,0.86,1.0,0.92,0.49,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.0,0.38,0.86,1.0,1.0,0.96,0.31,0.0,0.0,0.0,0.0,0.02,0.2,0.52,0.37,0.11,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.01,0.0,0.0,0.07,0.75,1.0,1.0,1.0,0.48,0.03,0.0,0.0,0.0,0.0,0.0,0.18,0.07,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.11,0.09,0.22,0.15,0.32,0.71,0.94,1.0,1.0,0.97,0.54,0.12,0.02,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.06,0.33,0.47,0.51,0.58,0.77,0.95,1.0,1.0,1.0,1.0,0.62,0.12,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.04,0.4,0.69,0.88,0.95,1.0,1.0,1.0,1.0,1.0,0.93,0.68,0.22,0.02,0.0,0.0,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.39,0.69,0.91,1.0,1.0,1.0,1.0,1.0,0.85,0.52,0.35,0.24,0.17,0.07,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.29,0.82,1.0,1.0,1.0,1.0,1.0,1.0,0.67,0.29,0.02,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
     vec![0.0,0.0,0.0,0.0,0.2,0.51,0.77,0.96,0.93,0.71,0.4,0.16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], 
     vec![0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.08,0.07,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]]]
}


fn random_square(h: usize, l: usize, _mode: Mode) -> Vec<Vec<f64>>{
    let mut rng = rand::thread_rng();

    let mut result: Vec<Vec<f64>> = Vec::with_capacity(h);
    for _i in 0..h{
        let mut ligne: Vec<f64> = Vec::with_capacity(l);
        for _j in 0..l{
            let r = rng.gen::<f64>();
            // println!("{}\n", r);

            /*
            if mode == Mode::Gol {
                if 1.0 - r < r - 0.0 { ligne.push(1.0); }
                else { ligne.push(0.0); }
            }
            else { ligne.push(r); }
            */

            ligne.push(r);
        }
        result.push(ligne);
    }
    result
}

pub fn kernel_init(k_type: Kernel) -> (Vec<Vec<Vec<f64>>>, Vec<f64>){
    match k_type{
        Kernel::Ring1(h) => {
            return ring_kernel1(h)
        },
        Kernel::Ring2(h1, h2) => {
            return ring_kernel2(h1, h2)
        },
        Kernel::Bumpy(p) => {
            return bumpy_kernel(&p);
        },
        Kernel::Radical(p) => {
            return radical_kernel(&p);
        }
    }
}


fn ring_kernel1(h: usize) -> (Vec<Vec<Vec<f64>>>, Vec<f64>){
    let mut result = vec![vec![0.0 ; h]; h];

    let rayon = h/2;
    println!("rayon : {}", rayon);
    let mut sum = 0.0;
    
    for x in 0..h{
        for y in 0..h {
            let dx;
            let dy;
            if x > rayon { dx =  x-rayon}
            else { dx = rayon-x}
            if y > rayon { dy =  y-rayon}
            else { dy = rayon-y}

            let distance = ((dx*dx + dy*dy) as f64).sqrt()/(rayon as f64);
            if distance <= 1.0 {
                let d_gauss = gaussian(0.5,0.15,distance);
                sum += d_gauss;
                result[x][y] = d_gauss;
            }
        }
    }
    
    for i in 0..h{
        for j in 0..h{
            result[i][j] /= sum;
        }
    }


    /*
    
    sum = 0.0;

    for i in 0..h{
        for j in 0..h{
            sum += result[i][j];
        }
    }
    
    println!("{}\n", sum);
     */

    (vec![],vec![])
}


fn ring_kernel2(_h1: usize, _h2: usize) -> (Vec<Vec<Vec<f64>>>, Vec<f64>){
    (vec![],vec![])
}

fn bumpy_kernel(p: &Param) -> (Vec<Vec<Vec<f64>>>, Vec<f64>){
    println!("p : {:?}", p);
    let h = 2*p.gr +1;
    let mut result = vec![vec![vec![0.0 ; h]; h]; p.nb_kernels];


    let mut sum = vec![0.0; p.nb_kernels];
    
    for k in 0..p.nb_kernels {
        for x in 0..h {
            for y in 0..h {
                let dx;
                let dy;
                if x > p.gr { dx =  x-p.gr}
                else { dx = p.gr-x}
                if y > p.gr { dy =  y-p.gr}
                else { dy = p.gr-y}

                let distance = ((dx*dx + dy*dy) as f64).sqrt()/(p.r[k]*(p.gr as f64));
                // println!("{}", distance);
                if distance <= 1.0 {
                    for i in 0..p.nb_bump[k]{
                        // println!("nb_bump: {}, lens: a-{} b-{} w-{}", p.nb_bump[k], p.a.len(), p.b.len(), p.w.len());
                        let d_gauss = p.b[k][i]*gaussian(p.a[k][i],p.w[k][i],distance);
                        // println!("{}", d_gauss);
                        sum[k] += d_gauss;
                        result[k][x][y] += d_gauss;
                    }
                }
            }
        }
        // println!("k: {}, gr: {}, r: {}\na: {:?}\nw: {:?}\nb: {:?}\n", k, gr, r, a, w, b);



        for i in 0..h{
            for j in 0..h{
                result[k][i][j] /= sum[k];
            }
        }
    }


    (result,sum)
}

pub fn claude_kernel(p: &Param) -> (Vec<Vec<Vec<f64>>>, Vec<f64>){
    let n = 24;
    let m = ((16 * n) as f64 / 9.0).ceil() as usize;

    // Création de la matrice X
    let mut x_matrix = vec![vec![0.0; m]; n];

    // Calcul des half sizes
    let fhs_y = n / 2;
    let fhs_x = m / 2;

    // Création des grilles y et x bidimensionnelles (équivalent à np.ogrid)
    let mut y = vec![vec![0.0; m]; n];
    let mut x = vec![vec![0.0; m]; n];

    for i in 0..n {
        for j in 0..m {
            y[i][j] = (i as i32 - fhs_y as i32) as f64;
            x[i][j] = (j as i32 - fhs_x as i32) as f64;
        }
    }

    let mut ks: Vec<Vec<Vec<f64>>> = Vec::new();

    let mut sum_k: Vec<f64> = vec![];

    for (b, r) in p.b.iter().zip(p.r.iter()) {
        // Calcul de la distance pour chaque point de la grille
        let mut distance = vec![vec![0.0; m]; n];
        for i in 0..n {
            for j in 0..m {
                distance[i][j] = (x[i][j].powi(2) + y[i][j].powi(2)).sqrt() / r * (b.len() as f64);
            }
        }

        // Initialisation de K avec des zéros
        let mut k = vec![vec![0.0; m]; n];

        let mu = 0.5;
        let sigma = 0.15;

        for idx in 0..b.len() {
            for i in 0..n {
                for j in 0..m {
                    if distance[i][j] as usize == idx {
                        k[i][j] += b[idx] * gaussian(mu, sigma, distance[i][j] % 1.0);
                    }
                }
            }
        }

        // Normalisation de K
        sum_k.push(k.iter().flatten().sum());
        let l = sum_k.len()-1;
        if sum_k[l] != 0.0 {
            for i in 0..n {
                for j in 0..m {
                    k[i][j] /= sum_k[l];
                }
            }
        }

        ks.push(k.into_iter().collect()); // Ou gardez la structure 2D selon vos besoins
    }

    (ks, sum_k)
}


fn radical_kernel(p: &Param) -> (Vec<Vec<Vec<f64>>>, Vec<f64>){
    println!("p : {:?}", p);
    let h = 2*p.gr +1;
    let mut result = vec![vec![vec![0.0 ; h]; h]; p.nb_kernels];

    let mut sum = vec![0.0; p.nb_kernels];
    
    for k in 0..p.nb_kernels {
        for x in 0..h {
            for y in 0..h {
                let dx;
                let dy;
                if x > p.gr { dx =  x-p.gr}
                else { dx = p.gr-x}
                if y > p.gr { dy =  y-p.gr}
                else { dy = p.gr-y}

                let distance = ((dx*dx + dy*dy) as f64).sqrt()/(p.r[k]*(p.gr as f64));
                // println!("{}", distance);
                if distance <= 1.0 {
                    for i in 0..p.nb_bump[k]{
                        let mut d_gauss = p.b[k][i]*gaussian(p.a[k][i],p.w[k][i],distance);
                        // println!("{}", d_gauss);
                        if 1.0 - d_gauss > d_gauss { d_gauss = 0.0; }
                        else { d_gauss = 1.0; }
                        sum[k] += d_gauss;
                        result[k][x][y] += d_gauss;
                    }
                }
            }
        }
        // println!("k: {}, gr: {}, r: {}\na: {:?}\nw: {:?}\nb: {:?}\n", k, gr, r, a, w, b);


        for i in 0..h{
            for j in 0..h{
                result[k][i][j] /= sum[k];
            }
        }
    }


    (result, sum)
}

